@model CreatePageViewModel
@{
    ViewData["Title"] = "Create";
}

<section class="container">
    <h1>@ViewData["Title"]</h1>
    <h4>Add a new Page</h4>
    <div class="row">
        <div class="col-md-4">
            <form asp-action="Create" method="post" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group mb-3">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Container" class="control-label"></label>
                    <span asp-validation-for="Container" class="text-danger"></span>
                    <textarea asp-for="Container" id="summernote" name="containerContent" class="form-control" rows="30">@Model.Container</textarea>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Contents" class="control-label"></label>
                    <select asp-for="Contents" asp-items="ViewBag.ContentList" multiple class="form-control dropdown-margin-bottom">
                    </select>
                    @if (ViewBag.ContentError != null)
                    {
                        <span class="error-message">@ViewBag.ContentError</span>
                    }
                </div>

                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary mt-1" />
                </div>
            </form>
        </div>
        <!-- Modal for Asset Selection -->
        <div class="modal fade" id="assetModal" tabindex="-1" aria-labelledby="assetModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="assetModalLabel">Select an Asset</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="assetSearchForm" class="row mb-3" onsubmit="return false;">
                            <div class="col-md-4 mb-2 mb-md-0">
                                <input type="text" class="form-control" name="name" placeholder="Search by name" aria-label="Search by name" />
                            </div>
                            <div class="col-md-4 mb-2 mb-md-0">
                                <input type="date" class="form-control" name="date" placeholder="Search by date" aria-label="Search by date" />
                            </div>
                            <div class="col-md-4">
                                <select class="form-control" name="category" id="categorySelect" aria-label="Filter by category">
                                    <option value="">All Categories</option>
                                </select>
                            </div>
                            <div class="col-12 mt-2 text-end">
                                <button type="button" id="clearFiltersBtn" class="btn btn-sm btn-outline-secondary">Reset Filters</button>
                            </div>
                        </form>
                        <div id="assetCount" class="mb-2 text-muted small"></div>
                        <div class="row" id="assetContainer"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div>
        <a asp-action="Index">Return to Page Index</a>
    </div>
</section>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/summernote@0.9.0/dist/summernote.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.9.0/dist/summernote.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const baseUrl = '@Url.Content("~/")';
        const fullBaseUrl = window.location.origin + baseUrl;
        let summernoteInstance;
        let debounceTimer;
        let allAssets = [];

        $(document).ready(function () {
            initSummernote();
            initializeAssetModal();
            bindAssetSearchEvents();
            $('#clearFiltersBtn').on('click', function () {
                $('#assetSearchForm')[0].reset();
                loadAssets();
            });
        });

        function initSummernote() {
            $('#summernote').summernote({
                height: 300,
                callbacks: {
                    onImageUpload: function (files) {
                        if (!files || files.length === 0) return;
                        const file = files[0];

                        if (file.type.startsWith("image/")) {
                            uploadFile(file, 'image');
                        } else if (file.type.startsWith("video/")) {
                            uploadFile(file, 'video');
                        } else {
                            alert("Unsupported file type.");
                        }
                    }
                },
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'clear']],
                    ['fontname', ['fontname']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['height', ['height']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video', 'insertAsset']],
                    ['view', ['fullscreen', 'codeview', 'help']]
                ],
                buttons: {
                    insertAsset: function (context) {
                        const ui = $.summernote.ui;
                        summernoteInstance = context;
                        return ui.button({
                            contents: '<i class="note-icon-picture"></i> Insert Asset',
                            tooltip: 'Insert Asset from Asset Library',
                            click: function () {
                                $('#assetModal').modal('show');
                            }
                        }).render();
                    }
                }
            });

            function uploadFile(file, type) {
                const formData = new FormData();
                formData.append("file", file);

                $.ajax({
                    url: '/PageContent/UploadFile',
                    method: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        if (data.url) {
                            if (type === 'image') {
                                $('#summernote').summernote('insertImage', data.url);
                            } else if (type === 'video') {
                                const videoHtml = `
                                    <video controls preload="none" style="max-width:100%;">
                                        <source src="${data.url}" type="${file.type}">
                                        Your browser does not support the video tag.
                                    </video>`;
                                $('#summernote').summernote('pasteHTML', videoHtml);
                            }
                        } else {
                            alert("File upload failed.");
                        }
                    },
                    error: function () {
                        alert("Error uploading file.");
                    }
                });
            }
        }

        function initializeAssetModal() {
            $('#assetModal').on('shown.bs.modal', async function () {
                try {
                    await loadCategories();
                    loadAssets();
                } catch (error) {
                    console.error("Error initializing asset modal:", error);
                }
            });
        }

        function bindAssetSearchEvents() {
            $('#assetSearchForm input, #assetSearchForm select').off('input change').on('input change', function () {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => {
                    const formData = $('#assetSearchForm').serializeArray();
                    const params = {};
                    formData.forEach(field => {
                        if (field.value?.trim()) {
                            params[field.name] = field.value.trim();
                        }
                    });
                    loadAssets(params);
                }, 300);
            });
        }

        async function loadCategories() {
            try {
                const res = await fetch('/api/react/category');
                const data = await res.json();

                const select = $('#categorySelect');
                select.empty().append('<option value="">All Categories</option>');
                data.forEach(category => {
                    const catValue = (category.name || '').toLowerCase();
                    select.append(`<option value="${catValue}">${category.name}</option>`);
                });
            } catch (err) {
                console.error("Failed to load categories:", err);
            }
        }

        function loadAssets(params = {}) {
            if (!allAssets.length) {
                fetch('/api/react/asset')
                    .then(res => res.json())
                    .then(data => {
                        allAssets = data;
                        const filtered = filterAssets(allAssets, params);
                        renderAssets(filtered);
                    })
                    .catch(err => console.error("Failed to load assets:", err));
            } else {
                const filtered = filterAssets(allAssets, params);
                renderAssets(filtered);
            }
        }

        function filterAssets(assets, params) {
            return assets.filter(asset => {
                let matches = true;

                if (params.name) {
                    matches = matches && asset.name?.toLowerCase().includes(params.name.toLowerCase());
                }

                if (params.date) {
                    const assetDate = new Date(asset.dateString).toISOString().slice(0, 10);
                    const filterDate = new Date(params.date).toISOString().slice(0, 10);
                    matches = matches && assetDate === filterDate;
                }

                if (params.category) {
                    const paramCat = params.category.toLowerCase();
                    const assetCategories = asset.categories || [];
                    const foundMatch = assetCategories.some(cat => (cat.name || '').toLowerCase() === paramCat);
                    matches = matches && foundMatch;
                }

                return matches;
            });
        }

        function renderAssets(data) {
            const container = $('#assetContainer');
            $('#assetCount').text(`${data.length} asset${data.length === 1 ? '' : 's'} found`);
            container.empty();

            if (!data.length) {
                container.append(`
                    <div class="col-12 text-center text-muted">
                        <p>No assets match your current filters.</p>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="resetAfterEmpty">Reset Filters</button>
                    </div>
                `);

                $('#assetContainer').on('click', '#resetAfterEmpty', function () {
                    $('#assetSearchForm')[0].reset();
                    loadAssets();
                });

                return;
            }

            data.forEach(asset => {
                const fullUrl = fullBaseUrl + asset.imageUrl.replace(/^\/+/, '');
                const isVideo = asset.imageUrl.toLowerCase().match(/\.(mp4|webm|ogg)$/);
                const mediaElement = isVideo
                    ? `<video src="${fullUrl}" controls preload="none" style="width: 100%; height: auto;"></video>`
                    : `<img src="${fullUrl}" alt="${asset.name}" title="${asset.name}"
                            class="img-fluid img-thumbnail asset-img" style="cursor:pointer;" data-url="${fullUrl}">`;

                const item = $(`
                    <div class="col-md-3 mb-3 asset-item" style="cursor: pointer;" data-url="${fullUrl}" data-type="${isVideo ? 'video' : 'image'}" role="button" tabindex="0" aria-label="Insert ${asset.name} into editor">
                        ${mediaElement}
                    </div>
                `);

                item.on('click keypress', function (e) {
                    if (e.type === 'click' || e.key === 'Enter' || e.key === ' ') {
                        const mediaUrl = $(this).data('url');
                        const type = $(this).data('type');
                        if (type === 'video') {
                            const videoHtml = `<video controls preload="none" style="max-width:100%;"><source src="${mediaUrl}" type="video/mp4"></video>`;
                            summernoteInstance.invoke('editor.pasteHTML', videoHtml);
                        } else {
                            summernoteInstance.invoke('editor.insertImage', mediaUrl);
                        }
                        $('#assetModal').modal('hide');
                    }
                });

                container.append(item);
            });
        }
    </script>
}
